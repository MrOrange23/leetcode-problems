package my.playground.leetcode._924_minimize_malware_spread;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

/**
 * Same as {@link Solution2} but with Map instead of List
 *
 * 51 tests ~ 30ms
 * 51 tests ~ 29ms
 * 51 tests ~ 40ms
 */
public class Solution3 {

  public int minMalwareSpread(int[][] graph, int[] initial) {
    Arrays.sort(initial);

    HashMap<Integer, Integer> network = new Network(graph, initial);
    int totalInfected = Integer.MIN_VALUE;
    int minNodeIndex = 0;

    for (int i : initial) {
      Integer size = network.get(i);
      if (size != null && totalInfected < size) {
        totalInfected = size;
        minNodeIndex = i;
      }
    }

    return minNodeIndex;
  }

  public static class Network extends HashMap<Integer, Integer> {

    Network(int[][] graph, int[] infected) {
      Set<Integer> stack = new HashSet<>(graph.length);

      for (int i : infected) {
        if (stack.contains(i)) continue;
        this.put(i, calcSize(i, graph, 0, stack));
      }
    }

    private int calcSize(int index, int[][] graph, int size, Set<Integer> stack) {
      int[] node = graph[index];

      for (int j = 0; j < node.length; j++) {
        if (node[j] == 1 && !stack.contains(j)) {
          size++;
          stack.add(j);

          size += calcSize(j, graph, size, stack);
        }
      }

      return size;
    }
  }

}
