package my.playground.leetcode._924_minimize_malware_spread;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * Same as {@link Solution4} but with flag in case when 2 infected nodes are in 1 subnet
 *
 * 51 tests ~ 21ms
 * 51 tests ~ 44ms
 * 51 tests ~ 37ms
 */
public class Solution5 {

  public int minMalwareSpread(int[][] graph, int[] initial) {
    Arrays.sort(initial);

    Set<Integer> stack = new HashSet<>(graph.length);
    Set<Integer> infected = new HashSet<>(graph.length);
    int maxInfected = Integer.MIN_VALUE;
    int minNodeIndex = 0;

    for (int i : initial) {
      int size = calcSize(i, graph, 0, infected, stack);
      if (maxInfected < size) {
        maxInfected = size;
        minNodeIndex = i;
      }
      infected.add(i);
    }

    return minNodeIndex;
  }

  static private int calcSize(int index, int[][] graph, int size, Set<Integer> infected, Set<Integer> stack) {
    int[] node = graph[index];

    for (int j = 0; j < node.length; j++) {
      if (node[j] == 1) {
        if (j != index && infected.contains(j)) {
          return Integer.MIN_VALUE;
        }
        if (!stack.contains(j)) {
          size++;
          stack.add(j);

          size += calcSize(j, graph, size, infected, stack);
        }
      }
    }

    return size;
  }

}
